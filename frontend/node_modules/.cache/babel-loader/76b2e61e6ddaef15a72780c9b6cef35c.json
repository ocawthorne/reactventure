{"ast":null,"code":"export const signup = userData => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        user: userData\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: \"AUTH_SUCCESS\",\n        payload: {\n          loggedIn: true,\n          currentUser: data.user\n        }\n      });\n      dispatch(save(data.user, [], [], ['crowbar', 'door', 'desk', 'drawer', 'paper', 'candle', 'chest'], [])); // Default values at beginning of game\n    });\n  };\n};\nexport const login = (userData, history) => {\n  return dispatch => {\n    fetch(\"http://localhost:3000/api/v1/sessions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(userData)\n    }).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        alert(data.error);\n      } else {\n        dispatch({\n          type: \"AUTH_SUCCESS\",\n          payload: {\n            loggedIn: true,\n            currentUser: data.user\n          }\n        });\n        history.push('/');\n        dispatch(retrieve(data.user));\n      }\n    });\n  };\n};\nexport const checkLoggedIn = () => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/logged_in`, {\n      credentials: 'include'\n    }).then(res => res.json()).then(data => dispatch({\n      type: \"AUTH_SUCCESS\",\n      payload: {\n        loggedIn: data.logged_in,\n        currentUser: data.user\n      }\n    }));\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/logout`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json()).then(data => dispatch({\n      type: \"LOGOUT_SUCCESS\"\n    }));\n  };\n};\nexport const save = (user, hist = [], inventory = [], knownObjects = ['crowbar', 'door', 'desk', 'drawer', 'paper', 'candle', 'chest'], brokenObjects = [], uniqueEvents = {}) => {\n  console.log('Save action initiated.');\n  if (!user) return null;\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/users/${user.id}`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        history: hist,\n        inventory: inventory,\n        known_objects: knownObjects,\n        broken_objects: brokenObjects,\n        unique_events: uniqueEvents\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: \"USER_HISTORY_FETCH_SUCCESS\",\n        payload: {\n          currentUser: user,\n          userHistory: hist,\n          userObjects: inventory,\n          knownObjects,\n          brokenObjects\n        }\n      });\n    });\n  };\n};\nexport const retrieve = user => {\n  console.log('Retrieve initiated.');\n  console.log(user);\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/users/${user.id}`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(r => r.json()).then(data => dispatch({\n      type: \"USER_HISTORY_FETCH_SUCCESS\",\n      payload: {\n        currentUser: user,\n        userHistory: data.history,\n        userObjects: data.inventory,\n        knownObjects: data.known_objects,\n        brokenObjects: data.broken_objects,\n        unique_events: uniqueEvents\n      }\n    })).catch(error => {\n      console.log(\"Error: \", error);\n    });\n  };\n};","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/actions/auth.js"],"names":["signup","userData","dispatch","fetch","method","headers","credentials","body","JSON","stringify","user","then","res","json","data","type","payload","loggedIn","currentUser","save","login","history","resp","error","alert","push","retrieve","checkLoggedIn","logged_in","logout","hist","inventory","knownObjects","brokenObjects","uniqueEvents","console","log","id","known_objects","broken_objects","unique_events","userHistory","userObjects","Accept","r","catch"],"mappings":"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","sourcesContent":["export const signup = (userData) => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/users`, {\n         method: 'POST',\n         headers: {\n            'Content-Type': 'application/json'\n         },\n         credentials: \"include\",\n         body: JSON.stringify({user: userData})\n      })\n      .then(res => res.json())\n      .then(data => {\n         dispatch({\n         type: \"AUTH_SUCCESS\",\n         payload: {\n            loggedIn: true,\n            currentUser: data.user\n            }\n         })\n         dispatch(save(data.user, [], [], ['crowbar','door','desk','drawer','paper','candle','chest'], [])) // Default values at beginning of game\n      })\n   }\n}\n\nexport const login = (userData, history) => {\n   return dispatch => {\n      fetch(\"http://localhost:3000/api/v1/sessions\", {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: 'include',\n         body: JSON.stringify(userData)\n      })\n      .then(resp => resp.json())\n      .then(data => {\n         if (data.error) {\n            alert(data.error);\n         } else {\n            dispatch({\n               type: \"AUTH_SUCCESS\",\n               payload: {\n                  loggedIn: true,\n                  currentUser: data.user\n               }\n            })\n            history.push('/')\n            dispatch(retrieve(data.user))\n         }\n      })\n   }\n}\n\nexport const checkLoggedIn = () => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/logged_in`, {\n         credentials: 'include'\n      })\n      .then(res => res.json())\n      .then(data => dispatch({\n         type: \"AUTH_SUCCESS\",\n         payload: {\n            loggedIn: data.logged_in,\n            currentUser: data.user\n         }\n      }))\n   }\n}\n\nexport const logout = () => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/logout`, {\n         method: \"DELETE\",\n         credentials: \"include\"\n      })\n      .then(res => res.json())\n      .then(data => dispatch({type: \"LOGOUT_SUCCESS\"}))\n   }\n}\n\nexport const save = (user, hist=[], inventory=[], knownObjects=['crowbar','door','desk','drawer','paper','candle','chest'], brokenObjects=[], uniqueEvents={}) => {\n   console.log('Save action initiated.')\n   if (!user) return null\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/users/${user.id}`, {\n         method: 'POST',\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: 'include',\n         body: JSON.stringify({\n            history: hist,\n            inventory: inventory,\n            known_objects: knownObjects,\n            broken_objects: brokenObjects,\n            unique_events: uniqueEvents\n         })\n      })\n      .then(res => res.json())\n      .then(data => {\n         dispatch({\n            type: \"USER_HISTORY_FETCH_SUCCESS\",\n            payload: {\n               currentUser: user,\n               userHistory: hist,\n               userObjects: inventory,\n               knownObjects,\n               brokenObjects\n            }\n         })\n      })\n   }\n}\n\nexport const retrieve = (user) => {\n   console.log('Retrieve initiated.')\n   console.log(user)\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/users/${user.id}`, {\n         credentials: \"include\",\n         method: \"GET\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n         }\n      })\n      .then(r => r.json())\n      .then(data => dispatch({\n            type: \"USER_HISTORY_FETCH_SUCCESS\",\n            payload: {\n               currentUser: user,\n               userHistory: data.history,\n               userObjects: data.inventory,\n               knownObjects: data.known_objects,\n               brokenObjects: data.broken_objects,\n               unique_events: uniqueEvents\n               }\n            })\n      )\n      .catch(error => {\n         console.log(\"Error: \", error);\n      })\n   }\n}\n"]},"metadata":{},"sourceType":"module"}