{"ast":null,"code":"export const signup = userData => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        user: userData\n      })\n    }).then(res => res.json()).then(data => dispatch({\n      type: \"AUTH_SUCCESS\",\n      payload: {\n        loggedIn: true,\n        currentUser: data.user\n      }\n    }));\n  };\n};\nexport const login = (userData, history) => {\n  return dispatch => {\n    fetch(\"http://localhost:3000/api/v1/sessions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(userData)\n    }).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        alert(data.error);\n      } else {\n        dispatch({\n          type: \"AUTH_SUCCESS\",\n          payload: {\n            loggedIn: true,\n            currentUser: data.user\n          }\n        });\n        history.push('/');\n      }\n    });\n  };\n};\nexport const checkLoggedIn = () => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/logged_in`, {\n      credentials: 'include'\n    }).then(res => res.json()).then(data => dispatch({\n      type: \"AUTH_SUCCESS\",\n      payload: {\n        loggedIn: data.logged_in,\n        currentUser: data.user\n      }\n    }));\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/logout`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json()).then(data => dispatch({\n      type: \"LOGOUT_SUCCESS\"\n    }));\n  };\n};","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/actions/auth.js"],"names":["signup","userData","dispatch","fetch","method","headers","credentials","body","JSON","stringify","user","then","res","json","data","type","payload","loggedIn","currentUser","login","history","resp","error","alert","push","checkLoggedIn","logged_in","logout"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAIC,QAAD,IAAc;AACjC,SAAOC,QAAQ,IAAI;AAChBC,IAAAA,KAAK,CAAE,oCAAF,EAAuC;AACzCC,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,OAAO,EAAE;AACN,wBAAgB;AADV,OAFgC;AAKzCC,MAAAA,WAAW,EAAE,SAL4B;AAMzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,IAAI,EAAET;AAAP,OAAf;AANmC,KAAvC,CAAL,CAQCU,IARD,CAQMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARb,EASCF,IATD,CASMG,IAAI,IAAIZ,QAAQ,CAAC;AACpBa,MAAAA,IAAI,EAAE,cADc;AAEpBC,MAAAA,OAAO,EAAE;AACNC,QAAAA,QAAQ,EAAE,IADJ;AAENC,QAAAA,WAAW,EAAEJ,IAAI,CAACJ;AAFZ;AAFW,KAAD,CATtB;AAgBF,GAjBD;AAkBF,CAnBM;AAqBP,OAAO,MAAMS,KAAK,GAAG,CAAClB,QAAD,EAAWmB,OAAX,KAAuB;AACzC,SAAOlB,QAAQ,IAAI;AAChBC,IAAAA,KAAK,CAAC,uCAAD,EAA0C;AAC5CC,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE;AACN,wBAAgB;AADV,OAFmC;AAK5CC,MAAAA,WAAW,EAAE,SAL+B;AAM5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf;AANsC,KAA1C,CAAL,CAQCU,IARD,CAQMU,IAAI,IAAIA,IAAI,CAACR,IAAL,EARd,EASCF,IATD,CASMG,IAAI,IAAI;AACX,UAAIA,IAAI,CAACQ,KAAT,EAAgB;AACbC,QAAAA,KAAK,CAACT,IAAI,CAACQ,KAAN,CAAL;AACF,OAFD,MAEO;AACJpB,QAAAA,QAAQ,CAAC;AACNa,UAAAA,IAAI,EAAE,cADA;AAENC,UAAAA,OAAO,EAAE;AACNC,YAAAA,QAAQ,EAAE,IADJ;AAENC,YAAAA,WAAW,EAAEJ,IAAI,CAACJ;AAFZ;AAFH,SAAD,CAAR;AAOAU,QAAAA,OAAO,CAACI,IAAR,CAAa,GAAb;AACF;AACH,KAtBD;AAuBF,GAxBD;AAyBF,CA1BM;AA4BP,OAAO,MAAMC,aAAa,GAAG,MAAM;AAChC,SAAOvB,QAAQ,IAAI;AAChBC,IAAAA,KAAK,CAAE,wCAAF,EAA2C;AAC7CG,MAAAA,WAAW,EAAE;AADgC,KAA3C,CAAL,CAGCK,IAHD,CAGMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHb,EAICF,IAJD,CAIMG,IAAI,IAAIZ,QAAQ,CAAC;AACpBa,MAAAA,IAAI,EAAE,cADc;AAEpBC,MAAAA,OAAO,EAAE;AACNC,QAAAA,QAAQ,EAAEH,IAAI,CAACY,SADT;AAENR,QAAAA,WAAW,EAAEJ,IAAI,CAACJ;AAFZ;AAFW,KAAD,CAJtB;AAWF,GAZD;AAaF,CAdM;AAgBP,OAAO,MAAMiB,MAAM,GAAG,MAAM;AACzB,SAAOzB,QAAQ,IAAI;AAChBC,IAAAA,KAAK,CAAE,qCAAF,EAAwC;AAC1CC,MAAAA,MAAM,EAAE,QADkC;AAE1CE,MAAAA,WAAW,EAAE;AAF6B,KAAxC,CAAL,CAICK,IAJD,CAIMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJb,EAKCF,IALD,CAKMG,IAAI,IAAIZ,QAAQ,CAAC;AAACa,MAAAA,IAAI,EAAE;AAAP,KAAD,CALtB;AAMF,GAPD;AAQF,CATM","sourcesContent":["export const signup = (userData) => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/users`, {\n         method: 'POST',\n         headers: {\n            'Content-Type': 'application/json'\n         },\n         credentials: \"include\",\n         body: JSON.stringify({user: userData})\n      })\n      .then(res => res.json())\n      .then(data => dispatch({\n         type: \"AUTH_SUCCESS\",\n         payload: {\n            loggedIn: true,\n            currentUser: data.user\n         }\n      }))\n   }\n}\n\nexport const login = (userData, history) => {\n   return dispatch => {\n      fetch(\"http://localhost:3000/api/v1/sessions\", {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: 'include',\n         body: JSON.stringify(userData)\n      })\n      .then(resp => resp.json())\n      .then(data => {\n         if (data.error) {\n            alert(data.error);\n         } else {\n            dispatch({\n               type: \"AUTH_SUCCESS\",\n               payload: {\n                  loggedIn: true,\n                  currentUser: data.user\n               }\n            })\n            history.push('/')\n         }\n      })\n   }\n}\n\nexport const checkLoggedIn = () => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/logged_in`, {\n         credentials: 'include'\n      })\n      .then(res => res.json())\n      .then(data => dispatch({\n         type: \"AUTH_SUCCESS\",\n         payload: {\n            loggedIn: data.logged_in,\n            currentUser: data.user\n         }\n      }))\n   }\n}\n\nexport const logout = () => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/logout`, {\n         method: \"DELETE\",\n         credentials: \"include\"\n      })\n      .then(res => res.json())\n      .then(data => dispatch({type: \"LOGOUT_SUCCESS\"}))\n   }\n}\n"]},"metadata":{},"sourceType":"module"}