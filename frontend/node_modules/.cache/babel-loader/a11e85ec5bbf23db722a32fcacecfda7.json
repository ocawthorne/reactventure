{"ast":null,"code":"const help = `COMMANDS:\\n\n\"get/pick up/grab [item]\" will add it to your inventory.\\n\n\"use [item] on [another object]\" will apply the first object to the second.\\n\n\"look at [item]\" will allow you to inspect it.\\n\n\"help\" will display these choices again.`;\nconst defaultState = {\n  //! Inventory-related state\n  currentUser: '',\n  //? When a login is prompted, this value will be the user ID.\n  allEntities: [],\n  entitiesLoading: false,\n  userObjects: [],\n  //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n  knownObjects: ['crowbar', 'door', 'desk', 'drawer', 'paper', 'candle', 'chest'],\n  //? Gradually populated based on event.\n  //! History-related state\n  userHistory: [`I've woken up in a strange, damp little room with only a door in front of me.\\n\n      There is a desk on the left of me with a lit candle on top of it and a piece of paper next to the candle.\\n\n      An old chest sits to the right of me.\\n\n      A crowbar lies in front of the door.\\n \n      ${help}\\n `],\n  //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n  //! Command-related state\n  command: '',\n  //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n  uniqueEvents: {\n    openedChest: false,\n    //? This event is triggered by \"use crowbar on chest\" or \"open chest with crowbar\". Also destroys crowbar.\n    meltedIce: false\n  }\n}; //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nfunction addToHistoryWithoutChange(state, action, history, notification) {\n  addToHistoryWithoutChange(state, action, history, notification);\n}\n\nexport const commands = (state = defaultState, action) => {\n  console.log('Landed in command reducer.');\n\n  switch (action.type) {\n    case 'UPDATED_COMMAND':\n      return { ...state,\n        command: action.command\n      };\n\n    case 'SUBMITTED_COMMAND':\n      let history = state.userHistory;\n      let cmdSplit = action.command.split(\" \");\n      let item = cmdSplit[cmdSplit.length - 1];\n\n      switch (cmdSplit[0]) {\n        case 'get': //! Handling inventory changes\n\n        case 'pick':\n        case 'grab':\n          if (!state.knownObjects.includes(item)) {\n            let notification = `I don't know what '${item}' is.`;\n            addToHistoryWithoutChange(state, action, history, notification);\n          } else if (state.userObjects.includes(item)) {\n            let notification = \"I already have that!\";\n            addToHistoryWithoutChange(state, action, history, notification);\n          } else {\n            if (state.allEntities.filter(obj => obj.name === item)[0].obtainable) {\n              let notification = `I picked up the ${item}.`;\n              return { ...state,\n                userObjects: [...state.userObjects, item],\n                userHistory: [...history, `> ${action.command}\\n${notification}\\n `]\n              };\n            } else {\n              let notification = `I can't pick that up!`;\n              addToHistoryWithoutChange(state, action, history, notification);\n            }\n          }\n\n        case 'look':\n          if (!state.knownObjects.includes(item)) {\n            addToHistoryWithoutChange(state, action, history, `I don't know what '${item}' is.`);\n          } else {\n            addToHistoryWithoutChange(state, action, history, state.allEntities.filter(obj => obj.name === item)[0].description);\n          }\n\n        case 'use':\n          //! Handling the combination of two objects in inventory.\n          return { ...state,\n            command: state.command\n          };\n\n        case 'help':\n          return { ...state,\n            userHistory: [...history, `> ${action.command}\\n${help}\\n `]\n          };\n\n        case 'pray':\n          let notification = `God says: \"You must lead the people to the Promised Land!\"\\nYou'll do it next weekend.`;\n          addToHistoryWithoutChange(state, action, history, notification);\n\n        default:\n          //! TO ADD ABOVE: Miscellaneous commands such as open, look.\n          return { ...state,\n            userHistory: [...history, `> ${action.command}\\nI don't know how to do that.\\n `]\n          };\n      }\n\n    //? Loading entities\n\n    case \"LOADING_ENTITIES\":\n      console.log('Loading entities');\n      return { ...state,\n        isLoading: true\n      };\n\n    case \"FETCH_ENTITIES_SUCCESS\":\n      console.log('Entity fetch succeeded');\n      return { ...state,\n        allEntities: action.allEntities,\n        entitiesLoading: false\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/reducers/commands.js"],"names":["help","defaultState","currentUser","allEntities","entitiesLoading","userObjects","knownObjects","userHistory","command","uniqueEvents","openedChest","meltedIce","addToHistoryWithoutChange","state","action","history","notification","commands","console","log","type","cmdSplit","split","item","length","includes","filter","obj","name","obtainable","description","isLoading"],"mappings":"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","sourcesContent":["const help = `COMMANDS:\\n\n\"get/pick up/grab [item]\" will add it to your inventory.\\n\n\"use [item] on [another object]\" will apply the first object to the second.\\n\n\"look at [item]\" will allow you to inspect it.\\n\n\"help\" will display these choices again.`\n\nconst defaultState = {\n   //! Inventory-related state\n   currentUser: '',    //? When a login is prompted, this value will be the user ID.\n   allEntities: [],\n   entitiesLoading: false,\n   userObjects: [],    //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n   knownObjects: ['crowbar','door','desk','drawer','paper','candle','chest'],   //? Gradually populated based on event.\n\n   //! History-related state\n   userHistory: [\n      `I've woken up in a strange, damp little room with only a door in front of me.\\n\n      There is a desk on the left of me with a lit candle on top of it and a piece of paper next to the candle.\\n\n      An old chest sits to the right of me.\\n\n      A crowbar lies in front of the door.\\n \n      ${help}\\n `\n   ],    //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n\n   //! Command-related state\n   command: '',        //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n   uniqueEvents: {\n      openedChest: false, //? This event is triggered by \"use crowbar on chest\" or \"open chest with crowbar\". Also destroys crowbar.\n      meltedIce: false\n   }\n}                      //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nfunction addToHistoryWithoutChange(state, action, history, notification) {\n   addToHistoryWithoutChange(state, action, history, notification)\n}\n\nexport const commands = (state=defaultState, action) => {\n   console.log('Landed in command reducer.')\n   switch (action.type) {\n      case 'UPDATED_COMMAND':\n         return {...state, command: action.command}\n      case 'SUBMITTED_COMMAND':\n         let history = state.userHistory\n         let cmdSplit = action.command.split(\" \")\n         let item = cmdSplit[cmdSplit.length - 1]\n         switch(cmdSplit[0]) {\n            case 'get': //! Handling inventory changes\n            case 'pick':\n            case 'grab':\n               if (!state.knownObjects.includes(item)) {\n                  let notification = `I don't know what '${item}' is.`\n                  addToHistoryWithoutChange(state, action, history, notification)\n               } else if (state.userObjects.includes(item)) {\n                  let notification = \"I already have that!\"\n                  addToHistoryWithoutChange(state, action, history, notification)\n               } else {\n                  if (state.allEntities.filter(obj => obj.name === item)[0].obtainable) {\n                     let notification = `I picked up the ${item}.`\n                     return {...state, userObjects: [...state.userObjects, item], userHistory: [...history, `> ${action.command}\\n${notification}\\n `]}\n                  } else {\n                     let notification = `I can't pick that up!`\n                     addToHistoryWithoutChange(state, action, history, notification)\n                  }\n               }\n            case 'look':\n               if (!state.knownObjects.includes(item)) {\n                  addToHistoryWithoutChange(state, action, history, `I don't know what '${item}' is.`)\n               } else {\n                  addToHistoryWithoutChange(state, action, history, state.allEntities.filter(obj => obj.name === item)[0].description)\n               }\n            case 'use': //! Handling the combination of two objects in inventory.\n               return {...state, command: state.command}\n            case 'help':\n               return {...state, userHistory: [...history, `> ${action.command}\\n${help}\\n `]}\n            case 'pray':\n               let notification = `God says: \"You must lead the people to the Promised Land!\"\\nYou'll do it next weekend.`\n               addToHistoryWithoutChange(state, action, history, notification)\n            default: //! TO ADD ABOVE: Miscellaneous commands such as open, look.\n               return {...state, userHistory: [...history, `> ${action.command}\\nI don't know how to do that.\\n `]}\n         }\n\n\n\n      //? Loading entities\n      case \"LOADING_ENTITIES\":\n         console.log('Loading entities')\n         return {...state, isLoading: true}\n      case \"FETCH_ENTITIES_SUCCESS\":\n         console.log('Entity fetch succeeded')\n         return {...state, allEntities: action.allEntities, entitiesLoading: false}\n      default:\n         return state\n   }\n}\n"]},"metadata":{},"sourceType":"module"}