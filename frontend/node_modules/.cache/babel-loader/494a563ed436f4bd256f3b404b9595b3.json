{"ast":null,"code":"const defaultState = {\n  currentUser: '',\n  //? When a login is prompted, this value will be the user ID.\n  userObjects: [],\n  //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n  knownObjects: ['crowbar', 'candle', 'desk', 'chest', 'door'],\n  userHistory: [],\n  //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n  command: '' //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n\n}; //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nconst commandReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'UPDATED_COMMAND':\n      return { ...state,\n        command: action.command\n      };\n\n    case 'SUBMITTED_COMMAND':\n      const cmdSplit = action.command.split(\" \");\n\n      switch (cmdSplit[0]) {\n        case 'get':\n          console.log('This is a get!');\n          debugger;\n\n          if (state.userObjects.includes(cmdSplit[1])) {\n            console.log('Object already in inventory.');\n            return state;\n          } else {\n            console.log('Adding object to inventory.');\n            debugger;\n            return { ...state,\n              userObjects: state.userObjects.push(cmdSplit[1])\n            };\n          }\n\n        case 'use':\n          console.log('This is a use!');\n          return { ...state,\n            command: state.command\n          };\n\n        default:\n          console.log('This is default.');\n          return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default commandReducer;","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/reducers/commandReducer.js"],"names":["defaultState","currentUser","userObjects","knownObjects","userHistory","command","commandReducer","state","action","type","cmdSplit","split","console","log","includes","push"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AAClBC,EAAAA,WAAW,EAAE,EADK;AACE;AACpBC,EAAAA,WAAW,EAAE,EAFK;AAEE;AACpBC,EAAAA,YAAY,EAAE,CAAC,SAAD,EAAW,QAAX,EAAoB,MAApB,EAA2B,OAA3B,EAAmC,MAAnC,CAHI;AAIlBC,EAAAA,WAAW,EAAE,EAJK;AAIE;AACpBC,EAAAA,OAAO,EAAE,EALS,CAKE;;AALF,CAArB,C,CAMuB;;AAGvB,MAAMC,cAAc,GAAG,CAACC,KAAK,GAACP,YAAP,EAAqBQ,MAArB,KAAgC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACG,SAAK,iBAAL;AACG,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAA3B,OAAP;;AACH,SAAK,mBAAL;AACG,YAAMK,QAAQ,GAAGF,MAAM,CAACH,OAAP,CAAeM,KAAf,CAAqB,GAArB,CAAjB;;AAEA,cAAOD,QAAQ,CAAC,CAAD,CAAf;AACG,aAAK,KAAL;AACGE,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;;AACA,cAAIN,KAAK,CAACL,WAAN,CAAkBY,QAAlB,CAA2BJ,QAAQ,CAAC,CAAD,CAAnC,CAAJ,EAA6C;AAC1CE,YAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,mBAAON,KAAP;AACF,WAHD,MAGO;AACJK,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACA,mBAAO,EAAC,GAAGN,KAAJ;AAAWL,cAAAA,WAAW,EAAEK,KAAK,CAACL,WAAN,CAAkBa,IAAlB,CAAuBL,QAAQ,CAAC,CAAD,CAA/B;AAAxB,aAAP;AACF;;AACJ,aAAK,KAAL;AACGE,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,iBAAO,EAAC,GAAGN,KAAJ;AAAWF,YAAAA,OAAO,EAAEE,KAAK,CAACF;AAA1B,WAAP;;AACH;AACGO,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,iBAAON,KAAP;AAjBN;;AAoBH;AACG,aAAOA,KAAP;AA3BN;AA8BF,CA/BD;;AAiCA,eAAeD,cAAf","sourcesContent":["const defaultState = {\n   currentUser: '',    //? When a login is prompted, this value will be the user ID.\n   userObjects: [],    //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n   knownObjects: ['crowbar','candle','desk','chest','door'],\n   userHistory: [],    //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n   command: ''         //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n}                      //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\n\nconst commandReducer = (state=defaultState, action) => {\n   switch (action.type) {\n      case 'UPDATED_COMMAND':\n         return {...state, command: action.command}\n      case 'SUBMITTED_COMMAND':\n         const cmdSplit = action.command.split(\" \")\n\n         switch(cmdSplit[0]) {\n            case 'get':\n               console.log('This is a get!')\n               debugger\n               if (state.userObjects.includes(cmdSplit[1])) {\n                  console.log('Object already in inventory.')\n                  return state\n               } else {\n                  console.log('Adding object to inventory.')\n                  debugger\n                  return {...state, userObjects: state.userObjects.push(cmdSplit[1])}\n               }\n            case 'use':\n               console.log('This is a use!')\n               return {...state, command: state.command}\n            default:\n               console.log('This is default.')\n               return state   \n         }\n\n      default:\n         return state\n   }\n   \n}\n\nexport default commandReducer\n"]},"metadata":{},"sourceType":"module"}