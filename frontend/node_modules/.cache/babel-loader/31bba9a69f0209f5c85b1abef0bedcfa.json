{"ast":null,"code":"const help = `COMMANDS:\\n\n\"get/pick up/grab [item]\" will add it to your inventory.\\n\n\"use [item] on [another object]\" will apply the first object to the second.\\n\n\"look at [item]\" will allow you to inspect it.\\n\n\"touch/feel [item]\" will let you feel the object.\\n\n\"help\" will display these choices again.`;\nconst hitDialogues = [`Violence is never the answer.`, `That hurt, and it did nothing. Thanks.`, `Didn't your mother teach you anything?`, `Ow.`, `Great, now I'm going to get a bruise.`];\nconst prayDialogues = [`God says: \"You must lead the people to the Promised Land!\"\\nYou'll do it next weekend if the weather's good.`, `God finds it surprising that you need His help in such a simple game.\\nHis omniscience gets the better of Him sometimes.`, `I prayed and nothing happened. Maybe next time.`, `I knelt down to pray and felt a slight crick in my back. I should get that checked out.`, `God suggests that you look around the room a bit more.\\nI think He's busy.`];\nconst defaultState = {\n  //! Inventory-related state\n  currentUser: '',\n  //? When a login is prompted, this value will be the user ID.\n  allEntities: [],\n  allEntityInteractions: [],\n  isLoading: false,\n  userObjects: [],\n  //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n  knownObjects: ['crowbar', 'door', 'desk', 'drawer', 'paper', 'candle', 'chest'],\n  //? Gradually populated based on event.\n  brokenObjects: [],\n  //! History-related state\n  userHistory: [`I've woken up in a strange, damp little room with only a door in front of me.\\n\n      There is a desk on the left of me with a lit candle on top of it and a piece of paper next to the candle.\\n\n      An old chest sits to the right of me.\\n\n      A crowbar lies in front of the door.\\n \n      ${help}\\n `],\n  //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n  //! Command-related state\n  command: '',\n  //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n  uniqueEvents: {\n    openedChest: false,\n    //? This event is triggered by \"use crowbar on chest\" or \"open chest with crowbar\". Also destroys crowbar.\n    meltedIce: false,\n    completedGame: false\n  }\n}; //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nfunction aHNC(state, notification) {\n  // Add History No Change (aHNC)\n  return { ...state,\n    userHistory: [...state.userHistory, `> ${state.command}\\n${notification}\\n `]\n  };\n}\n\nexport const commands = (state = defaultState, action) => {\n  console.log('Landed in command reducer.');\n\n  switch (action.type) {\n    case 'UPDATED_COMMAND':\n      return { ...state,\n        command: action.command\n      };\n\n    case 'SUBMITTED_COMMAND':\n      let cmdSplit = action.command.split(\" \");\n      let history = state.userHistory;\n      let item = cmdSplit[cmdSplit.length - 1];\n\n      switch (cmdSplit[0]) {\n        case 'get': //! Handling inventory changes\n\n        case 'pick':\n        case 'grab':\n          if (!state.knownObjects.includes(item)) {\n            return aHNC(state, `I don't know what '${item}' is.`);\n          } else if (state.userObjects.includes(item)) {\n            return aHNC(state, `I already have that!`);\n          } else {\n            if (state.allEntities.filter(obj => obj.name === item)[0].obtainable) {\n              let notification = `I picked up the ${item}.`;\n              return { ...state,\n                userObjects: [...state.userObjects, item],\n                userHistory: [...history, `> ${action.command}\\n${notification}\\n `]\n              };\n            } else {\n              return aHNC(state, `I can't pick that up!`);\n            }\n          }\n\n        case 'look':\n          if (!state.knownObjects.includes(item)) {\n            return aHNC(state, `I don't know what '${item}' is.`);\n          } else {\n            let object = state.allEntities.filter(obj => obj.name === item)[0];\n            return aHNC(state, object.broken ? object.description_broken : object.description);\n          }\n\n        case 'touch':\n        case 'feel':\n          if (!state.knownObjects.includes(item)) {\n            return aHNC(state, `I don't know what '${item}' is.`);\n          } else {\n            return aHNC(state, state.allEntities.filter(obj => obj.name === item)[0].feel);\n          }\n\n        case 'use':\n          //! Handling the combination of two knownObjects.\n          let items = [cmdSplit[1], item].sort();\n\n          if (state.knownObjects.includes(items[0]) && state.knownObjects.includes(items[1]) && state.userObjects.includes(cmdSplit[1])) {\n            let outcome = state.allEntityInteractions.filter(obj => obj.entity_1 === items[0] && obj.entity_2 === items[1])[0]; // let breakObject = (itemName) => {\n            //    let o = state.allEntities.filter(obj => obj.name === itemName)\n            //    let i = parseInt(Object.keys(o)[0])\n            //    return {\n            //       object: o,\n            //       index: i\n            //    }\n            // }\n\n            switch (outcome.action) {\n              case 'openedChest':\n                switch (state.uniqueEvents.openedChest) {\n                  case false:\n                    return { ...state,\n                      knownObjects: [...state.knownObjects, 'ice'],\n                      uniqueEvents: { ...state.uniqueEvents,\n                        openedChest: true\n                      },\n                      userObjects: [...state.userObjects].filter(obj => obj !== 'crowbar'),\n                      userHistory: [...state.userHistory, `> ${state.command}\\n${outcome.result_text}\\n `],\n                      brokenObjects: [...state.brokenObjects, 'crowbar']\n                    };\n\n                  case true:\n                    return aHNC(state, `I've already cracked the chest open.`);\n                }\n\n              default:\n                return aHNC(state, outcome.result_text);\n            }\n          } else {\n            if (!state.userObjects.includes(cmdSplit[1]) && state.knownObjects.includes(cmdSplit[1]) && state.allEntities.filter(obj => obj.name === cmdSplit[1])[0].obtainable) {\n              return aHNC(state, `I don't have the ${cmdSplit[1]} in my inventory.`);\n            } else {\n              return aHNC(state, `I don't know how to do that.`);\n            }\n          }\n\n        case 'open':\n          if (cmdSplit.length > 2) {\n            return aHNC(state, `Remember: the format for most commands is \"use [first item] on [second item]\".`);\n          } else {\n            return state; //TODO Add special consideration for objects like drawer, door, chest.\n          }\n\n        case 'help':\n          return aHNC(state, help);\n        //? For fun\n\n        case 'pray':\n          //! TO ADD ABOVE: Miscellaneous commands such as open, look.\n          return aHNC(state, prayDialogues[action.randomIndex]);\n\n        case 'punch':\n        case 'hit':\n          return aHNC(state, hitDialogues[action.randomIndex]);\n\n        default:\n          return { ...state,\n            userHistory: [...history, `> ${action.command}\\nI don't know how to do that.\\n `]\n          };\n      }\n\n    //? Loading entities and interactions\n\n    case \"LOADING_ENTITIES\":\n      console.log('Loading entities');\n      return { ...state,\n        isLoading: true\n      };\n\n    case \"FETCH_ENTITIES_SUCCESS\":\n      console.log('Entity fetch succeeded');\n      return { ...state,\n        allEntities: action.allEntities,\n        isLoading: false\n      };\n\n    case \"FETCH_ENTITY_INTERACTIONS_SUCCESS\":\n      console.log('Entity interaction fetch succeeded.');\n      return { ...state,\n        allEntityInteractions: action.allEntityInteractions,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/reducers/commands.js"],"names":["help","hitDialogues","prayDialogues","defaultState","currentUser","allEntities","allEntityInteractions","isLoading","userObjects","knownObjects","brokenObjects","userHistory","command","uniqueEvents","openedChest","meltedIce","completedGame","aHNC","state","notification","commands","action","console","log","type","cmdSplit","split","history","item","length","includes","filter","obj","name","obtainable","object","broken","description_broken","description","feel","items","sort","outcome","entity_1","entity_2","result_text","randomIndex"],"mappings":"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","sourcesContent":["const help = `COMMANDS:\\n\n\"get/pick up/grab [item]\" will add it to your inventory.\\n\n\"use [item] on [another object]\" will apply the first object to the second.\\n\n\"look at [item]\" will allow you to inspect it.\\n\n\"touch/feel [item]\" will let you feel the object.\\n\n\"help\" will display these choices again.`\n\nconst hitDialogues = [\n   `Violence is never the answer.`,\n   `That hurt, and it did nothing. Thanks.`,\n   `Didn't your mother teach you anything?`,\n   `Ow.`,\n   `Great, now I'm going to get a bruise.`\n]\n\nconst prayDialogues = [\n   `God says: \"You must lead the people to the Promised Land!\"\\nYou'll do it next weekend if the weather's good.`,\n   `God finds it surprising that you need His help in such a simple game.\\nHis omniscience gets the better of Him sometimes.`,\n   `I prayed and nothing happened. Maybe next time.`,\n   `I knelt down to pray and felt a slight crick in my back. I should get that checked out.`,\n   `God suggests that you look around the room a bit more.\\nI think He's busy.`\n]\n\nconst defaultState = {\n   //! Inventory-related state\n   currentUser: '',    //? When a login is prompted, this value will be the user ID.\n\n   allEntities: [],\n   allEntityInteractions: [],\n   isLoading: false,\n   \n   userObjects: [],    //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n   knownObjects: ['crowbar','door','desk','drawer','paper','candle','chest'],   //? Gradually populated based on event.\n   brokenObjects: [],\n\n   //! History-related state\n   userHistory: [\n      `I've woken up in a strange, damp little room with only a door in front of me.\\n\n      There is a desk on the left of me with a lit candle on top of it and a piece of paper next to the candle.\\n\n      An old chest sits to the right of me.\\n\n      A crowbar lies in front of the door.\\n \n      ${help}\\n `\n   ],    //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n\n   //! Command-related state\n   command: '',        //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n   uniqueEvents: {\n      openedChest: false, //? This event is triggered by \"use crowbar on chest\" or \"open chest with crowbar\". Also destroys crowbar.\n      meltedIce: false,\n      completedGame: false\n   }\n}                      //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nfunction aHNC(state, notification) { // Add History No Change (aHNC)\n   return {...state, userHistory: [...state.userHistory, `> ${state.command}\\n${notification}\\n `]}\n}\n\nexport const commands = (state=defaultState, action) => {\n   console.log('Landed in command reducer.')\n   switch (action.type) {\n      case 'UPDATED_COMMAND':\n         return {...state, command: action.command}\n      case 'SUBMITTED_COMMAND':\n         let cmdSplit = action.command.split(\" \")\n         let history = state.userHistory\n         let item = cmdSplit[cmdSplit.length - 1]\n         switch(cmdSplit[0]) {\n            case 'get': //! Handling inventory changes\n            case 'pick':\n            case 'grab':\n               if (!state.knownObjects.includes(item)) {\n                  return aHNC(state, `I don't know what '${item}' is.`)\n               } else if (state.userObjects.includes(item)) {\n                  return aHNC(state, `I already have that!`)\n               } else {\n                  if (state.allEntities.filter(obj => obj.name === item)[0].obtainable) {\n                     let notification = `I picked up the ${item}.`\n                     return {...state, userObjects: [...state.userObjects, item], userHistory: [...history, `> ${action.command}\\n${notification}\\n `]}\n                  } else {\n                     return aHNC(state, `I can't pick that up!`)\n                  }\n               }\n            case 'look':\n               if (!state.knownObjects.includes(item)) {\n                  return aHNC(state, `I don't know what '${item}' is.`)\n               } else {\n                  let object = state.allEntities.filter(obj => obj.name === item)[0]\n                  return aHNC(state, (object.broken ? object.description_broken : object.description))\n               }\n            case 'touch':\n            case 'feel':\n               if (!state.knownObjects.includes(item)) {\n                  return aHNC(state, `I don't know what '${item}' is.`)\n               } else {\n                  return aHNC(state, state.allEntities.filter(obj => obj.name === item)[0].feel)\n               }\n            case 'use': //! Handling the combination of two knownObjects.\n               let items = [cmdSplit[1], item].sort()\n               if (state.knownObjects.includes(items[0]) && state.knownObjects.includes(items[1]) && state.userObjects.includes(cmdSplit[1]) ) {\n                  let outcome = state.allEntityInteractions.filter(obj => obj.entity_1 === items[0] && obj.entity_2 === items[1])[0]\n                  // let breakObject = (itemName) => {\n                  //    let o = state.allEntities.filter(obj => obj.name === itemName)\n                  //    let i = parseInt(Object.keys(o)[0])\n                  //    return {\n                  //       object: o,\n                  //       index: i\n                  //    }\n                  // }\n                  switch(outcome.action) {\n                     case 'openedChest':\n                        switch(state.uniqueEvents.openedChest) {\n                           case false:\n                              return {\n                                 ...state,\n                                 knownObjects: [...state.knownObjects, 'ice'],\n                                 uniqueEvents: {...state.uniqueEvents, openedChest: true},\n                                 userObjects: [...state.userObjects].filter(obj => obj !== 'crowbar'),\n                                 userHistory: [...state.userHistory, `> ${state.command}\\n${outcome.result_text}\\n `],\n                                 brokenObjects: [...state.brokenObjects, 'crowbar']\n                              }\n                           case true:\n                              return aHNC(state, `I've already cracked the chest open.`)\n                        }\n                     default:\n                        return aHNC(state, outcome.result_text)\n                  }\n               } else {\n                  if (!state.userObjects.includes(cmdSplit[1]) && state.knownObjects.includes(cmdSplit[1]) && state.allEntities.filter(obj => obj.name === cmdSplit[1])[0].obtainable) {\n                     return aHNC(state, `I don't have the ${cmdSplit[1]} in my inventory.`)\n                  } else {\n                     return aHNC(state, `I don't know how to do that.`)\n                  }\n               }\n            case 'open':\n               if (cmdSplit.length > 2) {\n                  return aHNC(state, `Remember: the format for most commands is \"use [first item] on [second item]\".`)\n               } else {\n                  return state //TODO Add special consideration for objects like drawer, door, chest.\n               }\n\n\n\n            case 'help':\n               return aHNC(state, help)\n            //? For fun\n            case 'pray': //! TO ADD ABOVE: Miscellaneous commands such as open, look.\n               return aHNC(state, prayDialogues[action.randomIndex])\n            case 'punch':\n            case 'hit':\n               return aHNC(state, hitDialogues[action.randomIndex])\n            default:\n               return {...state, userHistory: [...history, `> ${action.command}\\nI don't know how to do that.\\n `]}\n         }\n\n\n\n      //? Loading entities and interactions\n      case \"LOADING_ENTITIES\":\n         console.log('Loading entities')\n         return {...state, isLoading: true}\n      case \"FETCH_ENTITIES_SUCCESS\":\n         console.log('Entity fetch succeeded')\n         return {...state, allEntities: action.allEntities, isLoading: false}\n      case \"FETCH_ENTITY_INTERACTIONS_SUCCESS\":\n         console.log('Entity interaction fetch succeeded.')\n         return {...state, allEntityInteractions: action.allEntityInteractions, isLoading: false}\n      default:\n         return state\n   }\n}\n"]},"metadata":{},"sourceType":"module"}