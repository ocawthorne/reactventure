{"ast":null,"code":"const defaultState = {\n  currentUser: '',\n  //? When a login is prompted, this value will be the user ID.\n  userObjects: [],\n  //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n  knownObjects: ['crowbar', 'candle', 'desk', 'chest', 'door'],\n  userHistory: [],\n  //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n  command: '' //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n\n}; //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nconst commandReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'UPDATED_COMMAND':\n      return { ...state,\n        command: action.command\n      };\n\n    case 'SUBMITTED_COMMAND':\n      let history = state.userHistory;\n      let cmdSplit = action.command.split(\" \");\n      let item = cmdSplit[cmdSplit.length - 1];\n\n      switch (cmdSplit[0]) {\n        case 'get':\n          console.log('This is a get!');\n\n          if (!state.knownObjects.includes(item)) {\n            let notification = \"I don't know what that is.\";\n            return { ...state,\n              userHistory: [...history, `${action.command}\\n${notification}`]\n            };\n          } else if (state.userObjects.includes(item)) {\n            console.log(`${item} already in inventory.`);\n            let notification = \"I already have that!\";\n            return { ...state,\n              userHistory: [...history, `${action.command}\\n${notification}`]\n            };\n          } else {\n            console.log(`Adding ${item} to inventory.`);\n            return { ...state,\n              userObjects: [...state.userObjects, item],\n              userHistory: [...history, `${action.command}\\n${notification}`]\n            };\n          }\n\n        case 'use':\n          console.log('This is a use!');\n          return { ...state,\n            command: state.command\n          };\n\n        default:\n          console.log('This is default.');\n          return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default commandReducer;","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/reducers/commandReducer.js"],"names":["defaultState","currentUser","userObjects","knownObjects","userHistory","command","commandReducer","state","action","type","history","cmdSplit","split","item","length","console","log","includes","notification"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AAClBC,EAAAA,WAAW,EAAE,EADK;AACE;AACpBC,EAAAA,WAAW,EAAE,EAFK;AAEE;AACpBC,EAAAA,YAAY,EAAE,CAAC,SAAD,EAAW,QAAX,EAAoB,MAApB,EAA2B,OAA3B,EAAmC,MAAnC,CAHI;AAIlBC,EAAAA,WAAW,EAAE,EAJK;AAIE;AACpBC,EAAAA,OAAO,EAAE,EALS,CAKE;;AALF,CAArB,C,CAMuB;;AAGvB,MAAMC,cAAc,GAAG,CAACC,KAAK,GAACP,YAAP,EAAqBQ,MAArB,KAAgC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACG,SAAK,iBAAL;AACG,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAA3B,OAAP;;AACH,SAAK,mBAAL;AACG,UAAIK,OAAO,GAAGH,KAAK,CAACH,WAApB;AACA,UAAIO,QAAQ,GAAGH,MAAM,CAACH,OAAP,CAAeO,KAAf,CAAqB,GAArB,CAAf;AACA,UAAIC,IAAI,GAAGF,QAAQ,CAACA,QAAQ,CAACG,MAAT,GAAkB,CAAnB,CAAnB;;AACA,cAAOH,QAAQ,CAAC,CAAD,CAAf;AACG,aAAK,KAAL;AACGI,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,cAAI,CAACT,KAAK,CAACJ,YAAN,CAAmBc,QAAnB,CAA4BJ,IAA5B,CAAL,EAAwC;AACrC,gBAAIK,YAAY,GAAG,4BAAnB;AACA,mBAAO,EAAC,GAAGX,KAAJ;AAAWH,cAAAA,WAAW,EAAE,CAAC,GAAGM,OAAJ,EAAc,GAAEF,MAAM,CAACH,OAAQ,KAAIa,YAAa,EAAhD;AAAxB,aAAP;AACF,WAHD,MAGO,IAAIX,KAAK,CAACL,WAAN,CAAkBe,QAAlB,CAA2BJ,IAA3B,CAAJ,EAAsC;AAC1CE,YAAAA,OAAO,CAACC,GAAR,CAAa,GAAEH,IAAK,wBAApB;AACA,gBAAIK,YAAY,GAAG,sBAAnB;AACA,mBAAO,EAAC,GAAGX,KAAJ;AAAWH,cAAAA,WAAW,EAAE,CAAC,GAAGM,OAAJ,EAAc,GAAEF,MAAM,CAACH,OAAQ,KAAIa,YAAa,EAAhD;AAAxB,aAAP;AACF,WAJM,MAIA;AACJH,YAAAA,OAAO,CAACC,GAAR,CAAa,UAASH,IAAK,gBAA3B;AACA,mBAAO,EAAC,GAAGN,KAAJ;AAAWL,cAAAA,WAAW,EAAE,CAAC,GAAGK,KAAK,CAACL,WAAV,EAAuBW,IAAvB,CAAxB;AAAsDT,cAAAA,WAAW,EAAE,CAAC,GAAGM,OAAJ,EAAc,GAAEF,MAAM,CAACH,OAAQ,KAAIa,YAAa,EAAhD;AAAnE,aAAP;AACF;;AACJ,aAAK,KAAL;AACGH,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,iBAAO,EAAC,GAAGT,KAAJ;AAAWF,YAAAA,OAAO,EAAEE,KAAK,CAACF;AAA1B,WAAP;;AACH;AACGU,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,iBAAOT,KAAP;AAnBN;;AAsBH;AACG,aAAOA,KAAP;AA9BN;AAiCF,CAlCD;;AAoCA,eAAeD,cAAf","sourcesContent":["const defaultState = {\n   currentUser: '',    //? When a login is prompted, this value will be the user ID.\n   userObjects: [],    //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n   knownObjects: ['crowbar','candle','desk','chest','door'],\n   userHistory: [],    //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n   command: ''         //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n}                      //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\n\nconst commandReducer = (state=defaultState, action) => {\n   switch (action.type) {\n      case 'UPDATED_COMMAND':\n         return {...state, command: action.command}\n      case 'SUBMITTED_COMMAND':\n         let history = state.userHistory\n         let cmdSplit = action.command.split(\" \")\n         let item = cmdSplit[cmdSplit.length - 1]\n         switch(cmdSplit[0]) {\n            case 'get':\n               console.log('This is a get!')\n               if (!state.knownObjects.includes(item)) {\n                  let notification = \"I don't know what that is.\"\n                  return {...state, userHistory: [...history, `${action.command}\\n${notification}`]}\n               } else if (state.userObjects.includes(item)) {\n                  console.log(`${item} already in inventory.`)\n                  let notification = \"I already have that!\"\n                  return {...state, userHistory: [...history, `${action.command}\\n${notification}`]}\n               } else {\n                  console.log(`Adding ${item} to inventory.`)\n                  return {...state, userObjects: [...state.userObjects, item], userHistory: [...history, `${action.command}\\n${notification}`]}\n               }\n            case 'use':\n               console.log('This is a use!')\n               return {...state, command: state.command}\n            default:\n               console.log('This is default.')\n               return state   \n         }\n\n      default:\n         return state\n   }\n   \n}\n\nexport default commandReducer\n"]},"metadata":{},"sourceType":"module"}