{"ast":null,"code":"const help = `COMMANDS:\\n\n\"get/pick up/grab [item]\" will add it to your inventory.\\n\n\"use [item] on [another object]\" will apply the first object to the second.\\n\n\"look at [item]\" will allow you to inspect it.\\n\n\"help\" will display these choices again.`;\nconst defaultState = {\n  currentUser: '',\n  //? When a login is prompted, this value will be the user ID.\n  userObjects: [],\n  //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n  knownObjects: ['crowbar', 'candle', 'desk', 'chest', 'door'],\n  //TODO Switch this so that the known objects are fetched.\n  userHistory: [`I've woken up in a strange, damp little room with only a door in front of me.\\n\n      There is a desk on the left of me with a lit candle on top of it and a piece of paper next to the candle.\\n\n      An old chest sits to the right of me.\\n\n      A crowbar lies in front of the door.\\n \n      ${help}\\n `],\n  //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n  command: '',\n  //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n  uniqueEvents: {\n    openedChest: false,\n    //? This event is triggered by \"use crowbar on chest\" or \"open chest with crowbar\". Also destroys crowbar.\n    meltedIce: false\n  }\n}; //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nexport const commands = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'UPDATED_COMMAND':\n      return { ...state,\n        command: action.command\n      };\n\n    case 'SUBMITTED_COMMAND':\n      let history = state.userHistory;\n      let cmdSplit = action.command.split(\" \");\n      let item = cmdSplit[cmdSplit.length - 1];\n\n      switch (cmdSplit[0]) {\n        case 'get': //! Handling inventory changes\n\n        case 'pick':\n        case 'grab':\n          console.log('This is a get!');\n\n          if (!state.knownObjects.includes(item)) {\n            let notification = `I don't know what '${item}' is.`;\n            return { ...state,\n              userHistory: [...history, `> ${action.command}\\n${notification}\\n `]\n            };\n          } else if (state.userObjects.includes(item)) {\n            console.log(`${item} already in inventory.`);\n            let notification = \"I already have that!\";\n            return { ...state,\n              userHistory: [...history, `> ${action.command}\\n${notification}\\n `]\n            };\n          } else {\n            let notification = `I picked up the ${item}.`;\n            return { ...state,\n              userObjects: [...state.userObjects, item],\n              userHistory: [...history, `> ${action.command}\\n${notification}\\n `]\n            };\n          }\n\n        case 'use':\n          //! Handling the combination of two objects in inventory.\n          console.log('This is a use!');\n          return { ...state,\n            command: state.command\n          };\n\n        case 'help':\n          return { ...state,\n            userHistory: [...history, `> ${action.command}\\n${help}\\n `]\n          };\n\n        case 'pray':\n          let notification = `God says: \"You must lead the people to the Promised Land!\"\\nYou'll do it next weekend.`;\n          return { ...state,\n            userHistory: [...history, `> ${action.command}\\n${notification}\\n `]\n          };\n\n        default:\n          //! TO ADD ABOVE: Miscellaneous commands such as open, look.\n          return { ...state,\n            userHistory: [...history, `> ${action.command}\\nI don't know how to do that.\\n `]\n          };\n      }\n\n    default:\n      return state;\n  }\n};\nexport default commands;","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/reducers/commands.js"],"names":["help","defaultState","currentUser","userObjects","knownObjects","userHistory","command","uniqueEvents","openedChest","meltedIce","commands","state","action","type","history","cmdSplit","split","item","length","console","log","includes","notification"],"mappings":"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","sourcesContent":["const help = `COMMANDS:\\n\n\"get/pick up/grab [item]\" will add it to your inventory.\\n\n\"use [item] on [another object]\" will apply the first object to the second.\\n\n\"look at [item]\" will allow you to inspect it.\\n\n\"help\" will display these choices again.`\n\nconst defaultState = {\n   currentUser: '',    //? When a login is prompted, this value will be the user ID.\n   userObjects: [],    //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n   knownObjects: ['crowbar','candle','desk','chest','door'], //TODO Switch this so that the known objects are fetched.\n   userHistory: [\n      `I've woken up in a strange, damp little room with only a door in front of me.\\n\n      There is a desk on the left of me with a lit candle on top of it and a piece of paper next to the candle.\\n\n      An old chest sits to the right of me.\\n\n      A crowbar lies in front of the door.\\n \n      ${help}\\n `\n   ],    //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n   command: '',        //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n   uniqueEvents: {\n      openedChest: false, //? This event is triggered by \"use crowbar on chest\" or \"open chest with crowbar\". Also destroys crowbar.\n      meltedIce: false\n   }\n}                      //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\n\nexport const commands = (state=defaultState, action) => {\n   switch (action.type) {\n      case 'UPDATED_COMMAND':\n         return {...state, command: action.command}\n      case 'SUBMITTED_COMMAND':\n         let history = state.userHistory\n         let cmdSplit = action.command.split(\" \")\n         let item = cmdSplit[cmdSplit.length - 1]\n         switch(cmdSplit[0]) {\n            case 'get': //! Handling inventory changes\n            case 'pick':\n            case 'grab':\n               console.log('This is a get!')\n               if (!state.knownObjects.includes(item)) {\n                  let notification = `I don't know what '${item}' is.`\n                  return {...state, userHistory: [...history, `> ${action.command}\\n${notification}\\n `]}\n               } else if (state.userObjects.includes(item)) {\n                  console.log(`${item} already in inventory.`)\n                  let notification = \"I already have that!\"\n                  return {...state, userHistory: [...history, `> ${action.command}\\n${notification}\\n `]}\n               } else {\n                  let notification = `I picked up the ${item}.`\n                  return {...state, userObjects: [...state.userObjects, item], userHistory: [...history, `> ${action.command}\\n${notification}\\n `]}\n               }\n            case 'use': //! Handling the combination of two objects in inventory.\n               console.log('This is a use!')\n               return {...state, command: state.command}\n            case 'help':\n               return {...state, userHistory: [...history, `> ${action.command}\\n${help}\\n `]}\n            case 'pray':\n               let notification = `God says: \"You must lead the people to the Promised Land!\"\\nYou'll do it next weekend.`\n               return {...state, userHistory: [...history, `> ${action.command}\\n${notification}\\n `]}\n            default: //! TO ADD ABOVE: Miscellaneous commands such as open, look.\n               return {...state, userHistory: [...history, `> ${action.command}\\nI don't know how to do that.\\n `]}\n         }\n\n      default:\n         return state\n   }\n   \n}\n\nexport default commands\n"]},"metadata":{},"sourceType":"module"}