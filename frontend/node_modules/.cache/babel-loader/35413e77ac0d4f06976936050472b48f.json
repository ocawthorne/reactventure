{"ast":null,"code":"const help = `COMMANDS:\\n\n\"get/pick up/grab [item]\" will add it to your inventory.\\n\n\"use [item] on [another object]\" will apply the first object to the second.\\n\n\"look at [item]\" will allow you to inspect it.\\n\n\"touch/feel [item]\" will let you feel the object.\\n\n\"help\" will display these choices again.`;\nconst hitDialogues = [`Violence is never the answer.`, `That hurt, and it did nothing. Thanks.`, `Didn't your mother teach you anything?`, `Ow.`, `Great, now I'm going to get a bruise.`];\nconst prayDialogues = [`God says: \"You must lead the people to the Promised Land!\"\\nI'll do it next weekend if the weather's good.`, `God finds it surprising that you need His help in such a simple game.\\nHis omniscience gets the better of Him sometimes.`, `I prayed and nothing happened. Maybe next time.`, `I knelt down to pray and felt a slight crick in my back. I should get that checked out.`, `God suggests that I look around the room a bit more.\\nI think He's busy.`];\nconst defaultState = {\n  //! Inventory-related state\n  // currentUser: '',    //? When a login is prompted, this value will be the user ID.\n  allEntities: [],\n  allEntityInteractions: [],\n  isLoading: false,\n  userObjects: [],\n  //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n  knownObjects: ['crowbar', 'door', 'desk', 'drawer', 'paper', 'candle', 'chest'],\n  //? Gradually populated based on event.\n  brokenObjects: [],\n  //! History-related state\n  userHistory: [],\n  //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n  //! Command-related state\n  command: '',\n  //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n  uniqueEvents: {\n    openedChest: false,\n    //? This event is triggered by \"use crowbar on chest\" or \"open chest with crowbar\". Also destroys crowbar.\n    meltedIce: false,\n    completedGame: false\n  }\n}; //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nfunction aHNC(state, notification) {\n  // Add History No Change (aHNC)\n  return { ...state,\n    userHistory: [...state.userHistory, `> ${state.command}\\n${notification}\\n `]\n  };\n}\n\nexport const commandReducer = (state = defaultState, action) => {\n  debugger;\n\n  switch (action.type) {\n    case 'UPDATED_COMMAND':\n      return { ...state,\n        command: action.command\n      };\n\n    case 'SUBMITTED_COMMAND':\n      if (state.uniqueEvents.completedGame) {\n        return aHNC(state, `Another room lies ahead, but my eyes haven't adapted to the light yet\\nTO BE CONTINUED...`);\n      }\n\n      let cmdSplit = action.command.split(\" \");\n      let history = state.userHistory;\n      let item = cmdSplit[cmdSplit.length - 1];\n\n      switch (cmdSplit[0]) {\n        case 'get': //! Handling inventory changes\n\n        case 'pick':\n        case 'grab':\n          if (!state.knownObjects.includes(item)) {\n            return aHNC(state, `I don't know what '${item}' is.`);\n          } else if (state.userObjects.includes(item)) {\n            return aHNC(state, `I already have that!`);\n          } else {\n            if (state.allEntities.filter(obj => obj.name === item)[0].obtainable) {\n              let notification = `I picked up the ${item}.`;\n              return { ...state,\n                userObjects: [...state.userObjects, item],\n                userHistory: [...history, `> ${action.command}\\n${notification}\\n `]\n              };\n            } else {\n              return aHNC(state, `I can't pick that up!`);\n            }\n          }\n\n        case 'look':\n          if (!state.knownObjects.includes(item)) {\n            return aHNC(state, `I don't know what '${item}' is.`);\n          } else {\n            let object = state.allEntities.filter(obj => obj.name === item)[0];\n            return aHNC(state, state.brokenObjects.includes(object.name) ? object.description_broken : object.description);\n          }\n\n        case 'touch':\n        case 'feel':\n          if (!state.knownObjects.includes(item)) {\n            return aHNC(state, `I don't know what '${item}' is.`);\n          } else {\n            return aHNC(state, state.allEntities.filter(obj => obj.name === item)[0].feel);\n          }\n\n        case 'use':\n          //! Handling the combination of two knownObjects.\n          let items = [cmdSplit[1], item].sort();\n\n          if (state.knownObjects.includes(items[0]) && state.knownObjects.includes(items[1]) && state.userObjects.includes(cmdSplit[1])) {\n            let outcome = state.allEntityInteractions.filter(obj => obj.entity_1 === items[0] && obj.entity_2 === items[1])[0];\n            if (!outcome) return aHNC(state, `I don't know how to do that.`);\n\n            switch (outcome.action) {\n              case 'openedChest':\n                switch (state.uniqueEvents.openedChest) {\n                  case false:\n                    return { ...state,\n                      knownObjects: [...state.knownObjects, 'ice'],\n                      uniqueEvents: { ...state.uniqueEvents,\n                        openedChest: true\n                      },\n                      userObjects: [...state.userObjects].filter(obj => obj !== 'crowbar'),\n                      userHistory: [...state.userHistory, `> ${state.command}\\n${outcome.result_text}\\n `],\n                      brokenObjects: [...state.brokenObjects, 'crowbar', 'chest']\n                    };\n\n                  case true:\n                    return aHNC(state, `I've already cracked the chest open.`);\n\n                  default:\n                    return { ...state\n                    };\n                }\n\n              case 'meltedIce':\n                switch (state.uniqueEvents.meltedIce) {\n                  case false:\n                    return { ...state,\n                      knownObjects: [...state.knownObjects, 'key'],\n                      uniqueEvents: { ...state.uniqueEvents,\n                        meltedIce: true\n                      },\n                      userObjects: [...[...state.userObjects].filter(obj => obj !== 'ice'), 'key'],\n                      userHistory: [...state.userHistory, `> ${state.command}\\n${outcome.result_text}\\n `],\n                      brokenObjects: [...state.brokenObjects, 'ice']\n                    };\n\n                  case true:\n                    return aHNC(state, `I've already melted the ice to reveal a key.`);\n\n                  default:\n                    return { ...state\n                    };\n                }\n\n              case 'completedGame':\n                switch (state.uniqueEvents.completedGame) {\n                  case false:\n                    return { ...state,\n                      uniqueEvents: { ...state.uniqueEvents,\n                        completedGame: true\n                      },\n                      userObjects: [...[...state.userObjects].filter(obj => obj !== 'key')],\n                      userHistory: [...state.userHistory, `> ${state.command}\\n${outcome.result_text}\\n\\nTO BE CONTINUED...\\n `],\n                      brokenObjects: [...state.brokenObjects, 'key']\n                    };\n\n                  default:\n                    return { ...state\n                    };\n                }\n\n              default:\n                return aHNC(state, outcome.result_text);\n            }\n          } else {\n            if (!state.userObjects.includes(cmdSplit[1]) && state.knownObjects.includes(cmdSplit[1]) && state.allEntities.filter(obj => obj.name === cmdSplit[1])[0].obtainable) {\n              return aHNC(state, `I don't have the ${cmdSplit[1]} in my inventory.`);\n            } else {\n              return aHNC(state, `I don't know how to do that.`);\n            }\n          }\n\n        case 'open':\n          if (cmdSplit.length > 2) {\n            return aHNC(state, `Remember: the format for most commands is \"use [first item] on [second item]\".`);\n          } else {\n            switch (item) {\n              case 'door':\n                return aHNC(state, `The door won't budge. I either need to find a key or use brute force.`);\n\n              case 'chest':\n                if (state.uniqueEvents.openedChest) {\n                  return aHNC(state, `The chest is already open.`);\n                } else {\n                  return aHNC(state, `The chest seems to be jammed shut.`);\n                }\n\n              case 'drawer':\n                return aHNC(state, `The drawer swings open with ease.\\nSadly, there's nothing inside.`);\n\n              default:\n                return aHNC(state, `I can't open that.`);\n            }\n          }\n\n        case 'help':\n          return aHNC(state, help);\n        //? For fun\n\n        case 'pray':\n          //! TO ADD ABOVE: Miscellaneous commands such as open, look.\n          return aHNC(state, prayDialogues[action.randomIndex]);\n\n        case 'punch':\n        case 'hit':\n          return aHNC(state, hitDialogues[action.randomIndex]);\n\n        default:\n          return { ...state,\n            userHistory: [...history, `> ${action.command}\\nI don't know how to do that.\\n `]\n          };\n      }\n\n    //? Loading entities and interactions\n\n    case \"LOADING_ENTITIES\":\n      return { ...state,\n        isLoading: true\n      };\n\n    case \"FETCH_ENTITIES_SUCCESS\":\n      return { ...state,\n        allEntities: action.allEntities,\n        isLoading: false\n      };\n\n    case \"FETCH_ENTITY_INTERACTIONS_SUCCESS\":\n      return { ...state,\n        allEntityInteractions: action.allEntityInteractions,\n        isLoading: false\n      };\n\n    case \"USER_HISTORY_FETCH_SUCCESS\":\n      return { ...state,\n        currentUser: action.payload.user,\n        userHistory: action.payload.userHistory,\n        userObjects: action.payload.userObjects,\n        knownObjects: action.payload.knownObjects,\n        brokenObjects: action.payload.brokenObjects\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/reducers/commandReducer.js"],"names":["help","hitDialogues","prayDialogues","defaultState","allEntities","allEntityInteractions","isLoading","userObjects","knownObjects","brokenObjects","userHistory","command","uniqueEvents","openedChest","meltedIce","completedGame","aHNC","state","notification","commandReducer","action","type","cmdSplit","split","history","item","length","includes","filter","obj","name","obtainable","object","description_broken","description","feel","items","sort","outcome","entity_1","entity_2","result_text","randomIndex","currentUser","payload","user"],"mappings":"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","sourcesContent":["const help = `COMMANDS:\\n\n\"get/pick up/grab [item]\" will add it to your inventory.\\n\n\"use [item] on [another object]\" will apply the first object to the second.\\n\n\"look at [item]\" will allow you to inspect it.\\n\n\"touch/feel [item]\" will let you feel the object.\\n\n\"help\" will display these choices again.`\n\nconst hitDialogues = [\n   `Violence is never the answer.`,\n   `That hurt, and it did nothing. Thanks.`,\n   `Didn't your mother teach you anything?`,\n   `Ow.`,\n   `Great, now I'm going to get a bruise.`\n]\n\nconst prayDialogues = [\n   `God says: \"You must lead the people to the Promised Land!\"\\nI'll do it next weekend if the weather's good.`,\n   `God finds it surprising that you need His help in such a simple game.\\nHis omniscience gets the better of Him sometimes.`,\n   `I prayed and nothing happened. Maybe next time.`,\n   `I knelt down to pray and felt a slight crick in my back. I should get that checked out.`,\n   `God suggests that I look around the room a bit more.\\nI think He's busy.`\n]\n\nconst defaultState = {\n   //! Inventory-related state\n   // currentUser: '',    //? When a login is prompted, this value will be the user ID.\n   allEntities: [],\n   allEntityInteractions: [],\n   isLoading: false,\n   \n   userObjects: [],    //? Starting empty at the beginning of the game, this is populated through 'get x' commands.\n   knownObjects: ['crowbar','door','desk','drawer','paper','candle','chest'],   //? Gradually populated based on event.\n   brokenObjects: [],\n\n   //! History-related state\n   userHistory: [],    //? This array stores every piece of narrative, feedback, and command that the user has prompted. This is rendered to the History container.\n\n   //! Command-related state\n   command: '',        //? This is modified when the user types in an input. When executed, this command is split into its respective words for further processing.\n   uniqueEvents: {\n      openedChest: false, //? This event is triggered by \"use crowbar on chest\" or \"open chest with crowbar\". Also destroys crowbar.\n      meltedIce: false,\n      completedGame: false\n   }\n}                      //! Specifically: \"get x\", \"use x on y\", \"open x\", and so on.\n\nfunction aHNC(state, notification) { // Add History No Change (aHNC)\n   return {...state, userHistory: [...state.userHistory, `> ${state.command}\\n${notification}\\n `]}\n}\n\nexport const commandReducer = (state=defaultState, action) => {\n   debugger\n   switch (action.type) {\n      case 'UPDATED_COMMAND':\n         return {...state, command: action.command}\n      case 'SUBMITTED_COMMAND':\n         if (state.uniqueEvents.completedGame) {\n            return aHNC(state, `Another room lies ahead, but my eyes haven't adapted to the light yet\\nTO BE CONTINUED...`)\n         }\n         let cmdSplit = action.command.split(\" \")\n         let history = state.userHistory\n         let item = cmdSplit[cmdSplit.length - 1]\n         switch(cmdSplit[0]) {\n            case 'get': //! Handling inventory changes\n            case 'pick':\n            case 'grab':\n               if (!state.knownObjects.includes(item)) {\n                  return aHNC(state, `I don't know what '${item}' is.`)\n               } else if (state.userObjects.includes(item)) {\n                  return aHNC(state, `I already have that!`)\n               } else {\n                  if (state.allEntities.filter(obj => obj.name === item)[0].obtainable) {\n                     let notification = `I picked up the ${item}.`\n                     return {...state, userObjects: [...state.userObjects, item], userHistory: [...history, `> ${action.command}\\n${notification}\\n `]}\n                  } else {\n                     return aHNC(state, `I can't pick that up!`)\n                  }\n               }\n            case 'look':\n               if (!state.knownObjects.includes(item)) {\n                  return aHNC(state, `I don't know what '${item}' is.`)\n               } else {\n                  let object = state.allEntities.filter(obj => obj.name === item)[0]\n                  return aHNC(state, (state.brokenObjects.includes(object.name) ? object.description_broken : object.description))\n               }\n            case 'touch':\n            case 'feel':\n               if (!state.knownObjects.includes(item)) {\n                  return aHNC(state, `I don't know what '${item}' is.`)\n               } else {\n                  return aHNC(state, state.allEntities.filter(obj => obj.name === item)[0].feel)\n               }\n            case 'use': //! Handling the combination of two knownObjects.\n               let items = [cmdSplit[1], item].sort()\n               if (state.knownObjects.includes(items[0]) && state.knownObjects.includes(items[1]) && state.userObjects.includes(cmdSplit[1]) ) {\n                  let outcome = state.allEntityInteractions.filter(obj => obj.entity_1 === items[0] && obj.entity_2 === items[1])[0]\n                  if (!outcome) return aHNC(state, `I don't know how to do that.`)\n                  switch(outcome.action) {\n                     case 'openedChest':\n                        switch(state.uniqueEvents.openedChest) {\n                           case false:\n                              return {\n                                 ...state,\n                                 knownObjects: [...state.knownObjects, 'ice'],\n                                 uniqueEvents: {...state.uniqueEvents, openedChest: true},\n                                 userObjects: [...state.userObjects].filter(obj => obj !== 'crowbar'),\n                                 userHistory: [...state.userHistory, `> ${state.command}\\n${outcome.result_text}\\n `],\n                                 brokenObjects: [...state.brokenObjects, 'crowbar', 'chest']\n                              }\n                           case true:\n                              return aHNC(state, `I've already cracked the chest open.`)\n                           default:\n                              return {...state}\n                        }\n                     case 'meltedIce':\n                        switch(state.uniqueEvents.meltedIce) {\n                           case false:\n                              return {\n                                 ...state,\n                                 knownObjects: [...state.knownObjects, 'key'],\n                                 uniqueEvents: {...state.uniqueEvents, meltedIce: true},\n                                 userObjects: [...[...state.userObjects].filter(obj => obj !== 'ice'), 'key'],\n                                 userHistory: [...state.userHistory, `> ${state.command}\\n${outcome.result_text}\\n `],\n                                 brokenObjects: [...state.brokenObjects, 'ice']\n                              }\n                           case true:\n                              return aHNC(state, `I've already melted the ice to reveal a key.`)\n                           default:\n                              return {...state}\n                        }\n                     case 'completedGame':\n                        switch(state.uniqueEvents.completedGame) {\n                           case false:\n                              return {\n                                 ...state,\n                                 uniqueEvents: {...state.uniqueEvents, completedGame: true},\n                                 userObjects: [...[...state.userObjects].filter(obj => obj !== 'key')],\n                                 userHistory: [...state.userHistory, `> ${state.command}\\n${outcome.result_text}\\n\\nTO BE CONTINUED...\\n `],\n                                 brokenObjects: [...state.brokenObjects, 'key']\n                              }\n                           default:\n                              return {...state}\n                        }\n                     default:\n                        return aHNC(state, outcome.result_text)\n                  }\n               } else {\n                  if (!state.userObjects.includes(cmdSplit[1]) && state.knownObjects.includes(cmdSplit[1]) && state.allEntities.filter(obj => obj.name === cmdSplit[1])[0].obtainable) {\n                     return aHNC(state, `I don't have the ${cmdSplit[1]} in my inventory.`)\n                  } else {\n                     return aHNC(state, `I don't know how to do that.`)\n                  }\n               }\n            case 'open':\n               if (cmdSplit.length > 2) {\n                  return aHNC(state, `Remember: the format for most commands is \"use [first item] on [second item]\".`)\n               } else {\n                  switch(item) {\n                     case 'door':\n                        return aHNC(state, `The door won't budge. I either need to find a key or use brute force.`)\n                     case 'chest':\n                        if (state.uniqueEvents.openedChest) {\n                           return aHNC(state, `The chest is already open.`)\n                        } else {\n                           return aHNC(state, `The chest seems to be jammed shut.`)\n                        }\n                     case 'drawer':\n                        return aHNC(state, `The drawer swings open with ease.\\nSadly, there's nothing inside.`)\n                     default:\n                        return aHNC(state, `I can't open that.`)\n                  }\n               }\n            case 'help':\n               return aHNC(state, help)\n            //? For fun\n            case 'pray': //! TO ADD ABOVE: Miscellaneous commands such as open, look.\n               return aHNC(state, prayDialogues[action.randomIndex])\n            case 'punch':\n            case 'hit':\n               return aHNC(state, hitDialogues[action.randomIndex])\n            default:\n               return {...state, userHistory: [...history, `> ${action.command}\\nI don't know how to do that.\\n `]}\n         }\n\n\n\n      //? Loading entities and interactions\n      case \"LOADING_ENTITIES\":\n         return {...state, isLoading: true}\n      case \"FETCH_ENTITIES_SUCCESS\":\n         return {...state, allEntities: action.allEntities, isLoading: false}\n      case \"FETCH_ENTITY_INTERACTIONS_SUCCESS\":\n         return {...state, allEntityInteractions: action.allEntityInteractions, isLoading: false}\n      case \"USER_HISTORY_FETCH_SUCCESS\":\n         return {\n            ...state,\n            currentUser: action.payload.user,\n            userHistory: action.payload.userHistory,\n            userObjects: action.payload.userObjects,\n            knownObjects: action.payload.knownObjects,\n            brokenObjects: action.payload.brokenObjects\n         }\n      default:\n         return state\n   }\n}\n"]},"metadata":{},"sourceType":"module"}