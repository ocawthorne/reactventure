{"ast":null,"code":"export const signup = userData => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        user: userData\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: \"AUTH_SUCCESS\",\n        payload: {\n          loggedIn: true,\n          currentUser: data.user\n        }\n      });\n      save(data.user, [], [], ['crowbar', 'door', 'desk', 'drawer', 'paper', 'candle', 'chest'], []); // Default values at beginning of game\n    });\n  };\n};\nexport const login = (userData, history) => {\n  return dispatch => {\n    fetch(\"http://localhost:3000/api/v1/sessions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(userData)\n    }).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        alert(data.error);\n      } else {\n        dispatch({\n          type: \"AUTH_SUCCESS\",\n          payload: {\n            loggedIn: true,\n            currentUser: data.user\n          }\n        });\n        history.push('/');\n        retrieve(data.user, dispatch);\n      }\n    });\n  };\n};\nexport const checkLoggedIn = () => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/logged_in`, {\n      credentials: 'include'\n    }).then(res => res.json()).then(data => dispatch({\n      type: \"AUTH_SUCCESS\",\n      payload: {\n        loggedIn: data.logged_in,\n        currentUser: data.user\n      }\n    }));\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    fetch(`http://localhost:3000/api/v1/logout`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json()).then(data => dispatch({\n      type: \"LOGOUT_SUCCESS\"\n    }));\n  };\n};\nexport const save = (user, hist = [], inventory = [], knownObjects = ['crowbar', 'door', 'desk', 'drawer', 'paper', 'candle', 'chest'], brokenObjects = [], disp = dispatch) => {\n  console.log('Save action initiated.');\n  return disp => {\n    fetch(`http://localhost:3000/api/v1/users/${user.id}`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        history: hist,\n        inventory: inventory,\n        known_objects: knownObjects,\n        broken_objects: brokenObjects\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: \"USER_HISTORY_FETCH_SUCCESS\",\n        payload: {\n          userHistory: hist,\n          userObjects: inventory,\n          knownObjects,\n          brokenObjects\n        }\n      });\n    });\n  };\n};\nexport const retrieve = (user, dispatch) => {\n  console.log('Retrieve initiated.');\n  console.log(user); // return dispatch => {\n\n  fetch(`http://localhost:3000/api/v1/users/${user.id}`, {\n    credentials: \"include\",\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  }).then(r => r.json()).then(data => dispatch({\n    type: \"USER_HISTORY_FETCH_SUCCESS\",\n    payload: {\n      userHistory: data.history,\n      userObjects: data.inventory,\n      knownObjects: data.known_objects,\n      brokenObjects: data.broken_objects\n    }\n  })).catch(error => {\n    console.log(\"Error: \", error);\n  }); // }\n};","map":{"version":3,"sources":["/home/loots/code/5-phase/reactventure/frontend/src/actions/auth.js"],"names":["signup","userData","dispatch","fetch","method","headers","credentials","body","JSON","stringify","user","then","res","json","data","type","payload","loggedIn","currentUser","save","login","history","resp","error","alert","push","retrieve","checkLoggedIn","logged_in","logout","hist","inventory","knownObjects","brokenObjects","disp","console","log","id","known_objects","broken_objects","userHistory","userObjects","Accept","r","catch"],"mappings":"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","sourcesContent":["export const signup = (userData) => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/users`, {\n         method: 'POST',\n         headers: {\n            'Content-Type': 'application/json'\n         },\n         credentials: \"include\",\n         body: JSON.stringify({user: userData})\n      })\n      .then(res => res.json())\n      .then(data => {\n         dispatch({\n         type: \"AUTH_SUCCESS\",\n         payload: {\n            loggedIn: true,\n            currentUser: data.user\n            }\n         })\n         save(data.user, [], [], ['crowbar','door','desk','drawer','paper','candle','chest'], []) // Default values at beginning of game\n      })\n   }\n}\n\nexport const login = (userData, history) => {\n   return dispatch => {\n      fetch(\"http://localhost:3000/api/v1/sessions\", {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: 'include',\n         body: JSON.stringify(userData)\n      })\n      .then(resp => resp.json())\n      .then(data => {\n         if (data.error) {\n            alert(data.error);\n         } else {\n            dispatch({\n               type: \"AUTH_SUCCESS\",\n               payload: {\n                  loggedIn: true,\n                  currentUser: data.user\n               }\n            })\n            history.push('/')\n            retrieve(data.user, dispatch)\n         }\n      })\n   }\n}\n\nexport const checkLoggedIn = () => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/logged_in`, {\n         credentials: 'include'\n      })\n      .then(res => res.json())\n      .then(data => dispatch({\n         type: \"AUTH_SUCCESS\",\n         payload: {\n            loggedIn: data.logged_in,\n            currentUser: data.user\n         }\n      }))\n   }\n}\n\nexport const logout = () => {\n   return dispatch => {\n      fetch(`http://localhost:3000/api/v1/logout`, {\n         method: \"DELETE\",\n         credentials: \"include\"\n      })\n      .then(res => res.json())\n      .then(data => dispatch({type: \"LOGOUT_SUCCESS\"}))\n   }\n}\n\nexport const save = (user, hist=[], inventory=[], knownObjects=['crowbar','door','desk','drawer','paper','candle','chest'], brokenObjects=[], disp=dispatch) => {\n   console.log('Save action initiated.')\n   return disp => {\n      fetch(`http://localhost:3000/api/v1/users/${user.id}`, {\n         method: 'POST',\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: 'include',\n         body: JSON.stringify({\n            history: hist,\n            inventory: inventory,\n            known_objects: knownObjects,\n            broken_objects: brokenObjects\n         })\n      })\n      .then(res => res.json())\n      .then(data => {\n         dispatch({\n            type: \"USER_HISTORY_FETCH_SUCCESS\",\n            payload: {\n               userHistory: hist,\n               userObjects: inventory,\n               knownObjects,\n               brokenObjects\n            }\n         })\n      })\n   }\n}\n\nexport const retrieve = (user, dispatch) => {\n   console.log('Retrieve initiated.')\n   console.log(user)\n   // return dispatch => {\n      fetch(`http://localhost:3000/api/v1/users/${user.id}`, {\n         credentials: \"include\",\n         method: \"GET\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n         }\n      })\n      .then(r => r.json())\n      .then(data => dispatch({\n            type: \"USER_HISTORY_FETCH_SUCCESS\",\n            payload: {\n               userHistory: data.history,\n               userObjects: data.inventory,\n               knownObjects: data.known_objects,\n               brokenObjects: data.broken_objects\n               }\n            })\n      )\n      .catch(error => {\n         console.log(\"Error: \", error);\n      })\n   // }\n}\n"]},"metadata":{},"sourceType":"module"}